from flask import Flask, request, render_template_string 
app = Flask(__name__) 
# Frozen stream route with a fake chatbox 
@app.route('/') 
def frozen_stream(): 
    return ''' <html> <head> <title>Web 100-2 - I Have Objections</title> <style> body { font-family: Arial, sans-serif; background-color: #f9f9f9; margin: 0; padding: 0; } .header { background-color: #282c34; color: white; padding: 15px; text-align: center; font-size: 24px; } .container { display: flex; justify-content: center; align-items: center; flex-direction: column; height: 90vh; } .video-container { border: 1px solid #ccc; width: 640px; height: 360px; background-color: black; position: relative; } .video-container img { width: 100%; height: 100%; } .buffering { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; font-size: 20px; } .complaint-link { margin-top: 20px; font-size: 18px; color: #2196F3; text-decoration: none; } .complaint-link:hover { text-decoration: underline; } .chatbox { width: 640px; height: 200px; margin-top: 20px; background-color: #1e1e1e; color: #fff; padding: 10px; overflow: hidden; border-radius: 5px; font-family: "Courier New", Courier, monospace; border: 1px solid #333; } .chatbox .message { padding: 5px; border-bottom: 1px solid #444; } .chatbox .message .username { color: #ff9800; font-weight: bold; } </style> </head> <body> <div class="header">POCTF 2024 - Contest Live Stream</div> <div class="container"> <div class="video-container"> <img src="/static/video-u458jk-720p.gif" alt="Frozen Stream"> <div class="buffering">Buffering...</div> </div> <p class="complaint-link"><a href="/complaint">Report Abuse / Service Issue</a></p> <div class="chatbox" id="chatbox"> <!-- Messages will be inserted here via JavaScript --> </div> </div> <script> // Predefined fake chat messages const messages = [ {"username": "Prof. Johnson", "message": "Stream is now live! An inside look at contest HQ - LIVE! A behind the scenes in Prof Johnson's lab in 10 min!"}, {"username": "MystikMatrix", "message": "Is the stream stuck for anyone else?"}, {"username": "Prof. Johnson", "message": "Oh... Ok, wait. Maybe still having issues..."}, {"username": "CipherByte", "message": "Yeah, it's buffering here too."}, {"username": "Kaleidoscopeic", "message": "Please stay patient, we're looking into the issue."}, {"username": "Prof. Johnson", "message": "Yeah. Seems like we might have an issue. Hang tight."}, {"username": "Громовой", "message": "Try refreshing the page, that worked for me."}, {"username": "GamerTape", "message": "Nope, still stuck. This always happens."}, {"username": "MoistCritikal", "message": "It's happening again..."}, {"username": "user789", "message": "So annoying..."}, {"username": "Dimitrovich702", "message": "Here for the stream!"}, {"username": "captainB", "message": "Stream started yet?"}, {"username": "st3r30byt3", "message": "I am sensing a disturbance in the stream."}, {"username": "Bokonon", "message": "Buffering beyond all understanding."}, {"username": "Prof. Johnson", "message": "Thanks for watching everyone! We'll get this sorted out soon."}, {"username": "moo", "message": "ok finally got in what did i miss?"}, {"username": "CallMeSaviour", "message": "Not much - technical difficulties so it hasn't started yet."}, {"username": "evilsun", "message": "Oh! I think I saw it move!"}, {"username": "InvertedClimbing", "message": "Prof has turned on auto censor for the chat. Enter your password and it'll mask it out. See, here's mine: **********"}, {"username": "Cha", "message": "no one is falling for that"}, {"username": "KaosMaker", "message": "This stream is so frigging buffered by now."} ]; let messageIndex = 0; const chatbox = document.getElementById('chatbox'); // Function to add a new message to the chat function addMessage(username, message) { const messageDiv = document.createElement('div'); messageDiv.classList.add('message'); messageDiv.innerHTML = '<span class="username">' + username + ':</span> ' + message; chatbox.appendChild(messageDiv); // Scroll to the bottom of the chatbox chatbox.scrollTop = chatbox.scrollHeight; // Remove the first message if there are too many if (chatbox.childElementCount > 10) { chatbox.removeChild(chatbox.firstChild); } } // Loop through messages and keep adding them to the chatbox function loopMessages() { const message = messages[messageIndex]; addMessage(message.username, message.message); messageIndex = (messageIndex + 1) % messages.length; // Loop back to the beginning } // Start the chat loop setInterval(loopMessages, 8000); // Add a new message every 2 seconds </script> </body> </html> ''' 
# Vulnerable complaint form route 
@app.route('/complaint', methods=['GET', 'POST']) 
def complaint_form(): 
    if request.method == 'POST': 
        # Vulnerable - input is reflected without sanitization 
        complaint = request.form.get('complaint') 
        return render_template_string(f''' <html> <head> <title>Complaint Submitted</title> <style> body {{ font-family: Arial, sans-serif; background-color: #f9f9f9; text-align: center; padding: 20px; }} </style> </head> <body> <h1>Thank you for your complaint</h1> <p>Your complaint: {complaint}</p> </body> </html> ''') 
    return ''' <html> <head> <title>Web 100-2 - I Have Objections</title> <style> body { font-family: Arial, sans-serif; background-color: #f9f9f9; text-align: center; padding: 20px; } form { display: inline-block; text-align: left; padding: 20px; background-color: #fff; border-radius: 5px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); } label { font-size: 18px; display: block; margin-bottom: 10px; } input[type="text"] { width: 100%; padding: 8px; margin-bottom: 15px; border: 1px solid #ccc; border-radius: 4px; } input[type="submit"] { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; } input[type="submit"]:hover { background-color: #45a049; } </style> </head> <body> <h1>Submit your complaint</h1> <form method="POST"> <label for="complaint">Complaint:</label> <input type="text" id="complaint" name="complaint"><br> <input type="submit" value="Submit"> </form> </body> </html> ''' 
    
# Hidden flag route (only accessible via XHR) 
@app.route('/flag') 
def flag(): 
    if request.headers.get("X-Requested-With") == "XMLHttpRequest": 
        return jsonify({"flag": "poctf{uwsp_71m3_15_4n_1llu510n}"}) 
    return "Access Denied", 403 
    
if __name__ == '__main__': 
    app.run(host="0.0.0.0", port=8449) 